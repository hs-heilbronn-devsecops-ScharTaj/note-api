# Name of the workflow
name: Python Tests and Code Coverage

# Action to trigger the workflow -> In this case, the workflow is triggered when we push something to main branch
on:
  pull_request:
    branches:
      - main
      - "*"
  push:
    branches:
      - main

# Define jobs
jobs:
  test:
    # Assign runner
    runs-on: ubuntu-latest

    # Strategy to run tests in parallel
    strategy:
      max-parallel: 4

    steps:
      - name: Set up Node.js (to ensure compatibility)
        uses: actions/setup-node@v3
        with:
          node-version: '20'

    
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      # Install required dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest-cov
          
      # Run tests with pytest in parallel and collect coverage
      # - name: Run tests with pytest and generate coverage report
      #   run: |
      #     pytest --cov=note_api --cov-report=xml

      # Run tests with pytest in parallel and collect coverage
      - name: Run tests with pytest and generate coverage report
        env:
          TESTING: "true"
        run: |
          pytest --cov=note_api --cov-report=xml


      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          flags: unittests
          name: codecov-coverage
          fail_ci_if_error: true
          verbose: true

      # Add Snyk security check
      - name: Snyk Security Scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/hs-heilbronn-devsecops-schartaj/note-api:${{ github.sha }} .

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_GHCR }}

      # Push Docker image to GitHub Container Registry
      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ghcr.io/hs-heilbronn-devsecops-schartaj/note-api:${{ github.sha }}